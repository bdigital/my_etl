#!/usr/bin/ruby
require 'optparse'

options = {:port => 5432, :host => 'localhost', :schema => 'foreign_schema', :foreign_server => 'myserver', :fake_schema => false}
OptionParser.new do |opts|
  opts.banner = "Usage: ./pgforeign.rb [options]"

  opts.on("-d", "--database [STRING]", "database name") do |d|
    options[:database] = d
  end
  
  opts.on("-f", "--foreign-server [STRING]", "foreign server name in ddl statements") do |d|
    options[:foreign_server] = d
  end
  
  opts.on("-u", "--username [STRING]", "user name to connect with") do |u|
    options[:username] = u
  end
  
  opts.on("-h", "--host [STRING]", "host to connect to") do |u|
    options[:host] = u
  end
  
  opts.on("-P", "--port [STRING]", "port to connect to") do |p|
    options[:port] = p
  end
  
  opts.on("-p", "--password [STRING]", "password to connect with, this may not work") do |p|
    options[:password] = p
  end

  opts.on("-s", "--destination-schema [STRING]", "schema of pg database to port the mysql tables") do |s|
    options[:schema] = s
  end

  opts.on("-x", "--fake_schema", "add double quoted schema like table names") do |s|
    options[:fake_schema] = true
  end

end.parse!

#
# Check some Error conditions
#
if options[:database].nil? && options[:config_file].nil?
  puts "must use -d or --database option, or specify a configuration file.  see --help for options."
  exit 1
end

q = <<SQL
  SELECT relname, attname, typname, schemaname
  FROM (
    SELECT relname, oid 
      FROM pg_class where relname in (
        SELECT tablename FROM pg_tables WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
      ) 
    ) AS tablez INNER JOIN pg_attribute on pg_attribute.attrelid = tablez.oid
      INNER JOIN pg_type on pg_type.oid = pg_attribute.atttypid
      INNER JOIN pg_tables ON pg_tables.tablename = tablez.relname
  WHERE typname NOT IN ('xid', 'cid', 'tid', 'oid')
  ORDER BY relname;
SQL

table_info = `echo "#{q}" | psql -d #{options[:database]} -h #{options[:host]} -U #{options[:username]} -p #{options[:port]}`

schemas = {} #
lines = table_info.split("\n")
lines.shift
lines.each do |line|
  table, attribute, type, schema = line.split("|").map {|i| i.strip}
  if !table.nil? && !attribute.nil? && !type.nil? && !schema.nil?
    schemas[schema] ||= {}
    schemas[schema][table] ||= {}
    schemas[schema][table][attribute] = type
  end
end

 # iterate over schemas -> tables -> attributes -> types, build sql
ddl = ""
schemas.each do |s, tables|
  tables.each do |t, attributes|
    tl = t
    tl = '"' + s + '.' + t + '"' if (options[:fake_schema] && s != 'public')
    ddl += "create foreign table #{options[:schema]}.#{tl} ("
   
    attributes.each { |attri, type| ddl += " \"#{attri}\" #{type}," }
    ddl.chop!
    
    ddl += ") SERVER #{options[:foreign_server]} OPTIONS (table_name '#{t}', schema_name '#{s}');"
  end
end

puts ddl
