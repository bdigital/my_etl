#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'csv'
# require 'debugger'
require_relative 'table_definition/indexes'
require_relative 'table_definition/columns'

options = {}
OptionParser.new do |opts|
    opts.banner = "Usage: ./discover.rb [options]"

    opts.on("-d", "--database [STRING]", "mysql database name to translate") do |d|
      options[:database] = d
    end

    opts.on("-s", "--destination-schema [STRING]", "schema of pg database to port the mysql tables") do |s|
      options[:schema] = s
    end
    
    opts.on("-m", "--mirror-schema [STRING]", "schema of pg database to mirror foreign tables locally") do |s|
      options[:mirror_schema] = s
    end
    
    opts.on("-r", "--replace_tables", "drops tables before creating tables") do |s|
      options[:replace] = s
    end

end.parse!

unless options[:database]
  puts "must use -d or --database option"
  exit 1
end

def announce_errors(errors_array)
  return if errors_array.empty?
  puts "=== ERRORS ==="
  errors_array.each { |em| puts em }
end

conf = YAML::load(File.open(File.dirname(__FILE__) + "/config.yml"))

conf.merge!(:destination_schema => option[:schema]) if options[:destination_schema]
conf.merge!(:replace => options[:replace]) if options[:replace]
conf.merge!(:mirror_schema => options[:mirror_schema]) if options[:mirror_schema]

tables, errors, copy_selects = TableDefinition::Columns.create_table_statements(conf, options[:database])

indexes = TableDefinition::Indexes.create_index_statements(conf, options[:database])

if errors.any?
  announce_errors(errors)
  exit 1
else
  puts tables
  indexes.each {|idx| puts idx }
  puts copy_selects
  exit 0
end
