#!/usr/bin/env ruby
#TODO: port indexes

require 'yaml'
require 'csv'
#require 'debugger'
require_relative 'table_definition/indexes'

def announce_errors(errors_array)
  return if errors_array.empty?
  puts "=== ERRORS ==="
  errors_array.each { |em| puts em }
end

conf = YAML::load(File.open(File.dirname(__FILE__) + "/config.yml"))
column_file = "#{File.dirname(__FILE__)}/columns.csv"

indexes = TableDefinition::Indexes.create_index_statements(conf, "theclymb_20130601")
indexes.each {|idx| puts idx }

exit 0

query = "select table_name, column_name, column_type, table_schema from information_schema.columns"
command = "echo '#{query}' | mysql -h #{conf['host']} -u #{conf['username']} -p#{conf['password']} --batch --raw --default-character-set=utf8  > #{column_file}"
`#{command}`

@schemas = {}
File.open(column_file).each_line do |row|
  table, column, type, schema = row.split("\t").map {|i| i.strip}
  if !['mysql','information_schema', 'performance_schema'].include? schema
    @schemas[schema] ||= {}
    @schemas[schema][table] ||= []
    @schemas[schema][table].push({column => type})
  end unless (table == 'table_name' && column == 'column_name' && type == 'column_type')
end

@schemas.each do |schema, tables|
  error_messages = []
  tables.each do |table, columns|
    destination_schema = ''
    destination_schema = conf['destination_schema'] + '.' unless (conf['destination_schema'].empty? || conf['destination_schema'].nil?)
    table_definition = "CREATE FOREIGN TABLE #{destination_schema}#{table} ("
    missed_columns = []
    columns.each do |c|
      col, type = c.to_a.flatten
      pg_type = case type
        when /char/ then 'text'
        when /bigint/ then 'bigint'
        when /int/ then 'integer'
        when /float|double|decimal/ then 'numeric'
        when /enum/ then 'text'
        when /blob|binary/ then 'bytea'
        when /text/ then 'text'
        #when 'date' then 'date'
        when /time/ then 'timestamp'
        else
          missed_columns << col
          puts "ERROR: unknown type #{type}"
      end
      table_definition += "\"#{col}\" #{pg_type}" unless pg_type.nil?
      table_definition += ", " unless c == columns.last
    end
    table_definition += ") "
    table_definition += "SERVER #{conf['foreign_server']} "
    table_definition += "OPTIONS (table '#{schema}.#{table}');"   
    
    if missed_columns.empty?
      puts table_definition
    else
      error_messages << "#{table} was not transferred because columns are missing: #{missed_columns.join(", ")}"
  end
  announce_errors(error_messages)
end
end


